<!--
***********************************************************************************************
After.CustomOutputPath.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

***********************************************************************************************
-->

<!--EXTERNAL_PROPERTIES: BuildingInsideVisualStudio;BuildingInsideIDE;UseVSHostingProcess;BaseOutputPath;BaseOutputDrive;IsBaseOutputDriveAvailable;UseLinksInOutputDirectory;UsingCustomOutputPath;;CreateLinkToOutputDirectory-->
<!-- ReSharper disable UnknownTask -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- override MSBuild target dependencies -->
  <PropertyGroup>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);ConfigureOutDir</PrepareForBuildDependsOn>
    <PrepareForRunDependsOn Condition="'$(IsBaseOutputDriveAvailable)' == 'true' AND '$(UseLinksInOutputDirectory)' == 'true'">_IgnoreBuildingInsideVisualStudio;$(PrepareForRunDependsOn);_RestoreBuildingInsideVisualStudio</PrepareForRunDependsOn>
  </PropertyGroup>

  <!--
  ============================================================
                                      _GetDefaultTargetDir

  Gets the name of the default target directory i.e. bin\debug based on $(OutputPath).
  ============================================================
  -->
  <Target Name="_GetDefaultTargetDir">
    <!-- fail if the OutputPath is not set; this can happen if the target is not run after AssignProjectConfiguration -->
    <Error Condition="'$(OutputPath)' == ''" Text="OutputPath is not set" />

    <PropertyGroup>
      <_DefaultTargetDir Condition="!$([System.IO.Path]::IsPathRooted('$(OutputPath)'))">$(MSBuildProjectDirectory)\$(OutputPath)</_DefaultTargetDir>
      <!-- example ...\MySolution\MyProject\bin\debug -->
      <_DefaultTargetDir Condition="$([System.IO.Path]::IsPathRooted('$(OutputPath)'))">$(OutputPath)</_DefaultTargetDir>
    </PropertyGroup>

    <!-- fail if the default TargetDir could not be determined -->
    <Error Condition="'$(_DefaultTargetDir)' == ''" Text="Could not determine the default TargetDir" />

    <!-- check if the default TargetDir is a symlink -->
    <PropertyGroup>
      <_IsDefaultTargetDirectorySymlink Condition="'$(_IsDefaultTargetDirectorySymlink)' == ''">false</_IsDefaultTargetDirectorySymlink>
      <_IsDefaultTargetDirectorySymlink Condition="Exists('$(_DefaultTargetDir)') AND $([MSBuild]::BitwiseAnd(1024, $([System.IO.File]::GetAttributes('$(_DefaultTargetDir)')))) == '1024'">true</_IsDefaultTargetDirectorySymlink>
    </PropertyGroup>
  </Target>

  <!--
  ============================================================
                                      ConfigureOutDir

  Configures the output directory to be either a symlink which points to the custom output directory, or the default target directory i.e. bin\debug.
  It depends on $(UsingCustomOutputPath).
  ============================================================
  -->
  <Target Name="ConfigureOutDir" Condition="'$(BuildingInsideIDE)' == 'true'" DependsOnTargets="_GetDefaultTargetDir">

    <PropertyGroup Condition="'$(CreateLinkToOutputDirectory)' != ''">
      <_CreateLinkToOutputDirectory Condition="'$(CreateLinkToOutputDirectory)' == 'true'">true</_CreateLinkToOutputDirectory>
      <_CreateLinkToOutputDirectory Condition="'$(CreateLinkToOutputDirectory)' == 'IfApplicationOrTest' AND ('$(IsApplication)' == 'true' OR '$(IsTestProject)' == 'true')">true</_CreateLinkToOutputDirectory>
    </PropertyGroup>    

    <CallTarget Condition="'$(UsingCustomOutputPath)' == 'true' AND '$(IsBaseOutputDriveAvailable)' == 'true' AND '$(_DefaultTargetDir)' != '$(TargetDir)' AND '$(_CreateLinkToOutputDirectory)' == 'true'"
                Targets="_LinkDefaultTargetDirToCustomTargetDir" />
    <CallTarget Condition="'$(UsingCustomOutputPath)' == 'true' AND '$(_CreateLinkToOutputDirectory)' != 'true' AND $(_IsDefaultTargetDirectorySymlink)"
                Targets="_DeleteDefaultTargetDir" />
    <CallTarget Condition="'$(UsingCustomOutputPath)' != 'true' AND $(_IsDefaultTargetDirectorySymlink)"
                Targets="_RestoreDefaultTargetDir" />
  </Target>

  <!--
  ============================================================
                                      _LinkDefaultTargetDirToCustomTargetDir

  Ensures the default target directory i.e. bin\debug is converted to a symlink which points to the custom target directory i.e. $(BaseOutputPath)\MySolution\MyProject\bin\debug.
  ============================================================
  -->
  <Target Name="_LinkDefaultTargetDirToCustomTargetDir">
    <!-- if the default TargetDir exists and it is not a symlink, then delete it -->
    <Message Condition="Exists('$(_DefaultTargetDir)') AND !$(_IsDefaultTargetDirectorySymlink)"
             Importance="normal" Text="Deleting default target directory '$(_DefaultTargetDir)' before linking it to custom target directory" />
    <CallTarget Condition="Exists('$(_DefaultTargetDir)') AND !$(_IsDefaultTargetDirectorySymlink)"
                Targets="_DeleteDefaultTargetDir" />
    <ConvertToSymlink LinkName="$(_DefaultTargetDir)"
                      TargetName="$(TargetDir)"
                      TargetType="Directory" />
  </Target>

  <!--
  ============================================================
                                      _DeleteDefaultTargetDir

  Deletes the default target directory i.e. bin\debug in case it needs to be configured as a symlink.
  ============================================================
  -->
  <Target Name="_DeleteDefaultTargetDir" DependsOnTargets="_FailIfVisualStudioHostingProcessIsRunning">
    <RemoveDir Directories="$(_DefaultTargetDir)" />
  </Target>

  <!--
  ============================================================
                                      _RestoreDefaultTargetDir

  Recreates the default target directory i.e. bin\debug in case it was configured as symlink by the previous build.
  ============================================================
  -->
  <Target Name="_RestoreDefaultTargetDir">
    <Message Importance="normal" Text="Recreating the default target directory '$(_DefaultTargetDir)' because it is a symlink and the output path is not custom anymore" />
    <CallTarget Targets="_DeleteDefaultTargetDir" />
    <MakeDir Directories="$(_DefaultTargetDir)" />
  </Target>

  <!--
  ============================================================
                                      _FailIfVisualStudioHostingProcessIsRunning

  Fail the build if the project is a EXE, the VS hosting process is used for debugging and the process is running.
  ============================================================
  -->
  <Target Name="_FailIfVisualStudioHostingProcessIsRunning" Condition="'$(TargetExt)' == '.exe' AND '$(UseVSHostingProcess)' != 'false'">
    <Message Importance="normal" Text="Checking if the VS hosting process is running" />
    <LookUpVisualStudioHostingProcess TargetName="$(TargetName)">
      <Output TaskParameter="IsRunning" PropertyName="_IsVSHostingProcessRunning" />
    </LookUpVisualStudioHostingProcess>
    <Error Condition="'$(_IsVSHostingProcessRunning)'" 
           Text="The project output directory cannot be changed while the Visual Studio hosting process is running. Please disable it manually from Project Properties > Debug. You can re-enable it after the build." />
  </Target>

  <!--
  ============================================================
                                      CreateLinksToReferences

  Resolved assembly references which are to be copied locally (ReferenceCopyLocalPaths) and which are not on the BaseOutputPath's drive (BaseOutputDrive)
  need to be linked to a location on this drive to allow the build process to use hard links when copying these references to the output directory.
  ============================================================
  -->
  <Target Name="CreateLinksToReferences" 
          Condition="'$(UseLinksInOutputDirectory)' == 'true' AND '@(ReferenceCopyLocalPaths)' != '' AND '$(IsBaseOutputDriveAvailable)' == 'true'" 
          AfterTargets="ResolveAssemblyReferences">

    <!-- for each resolved reference which is not on the base output drive, assign a symlink on the base output drive
           I.e if the original path is C:\Program Files (x86)\WiX Toolset v3.10\bin\wix.dll, then
                  the assigned symlink will be $(BaseOutputPath)_References\C\Program Files (x86)\WiX Toolset v3.10\bin\wix.dll -->
    
    <!-- gather info about the references to find the ones which are not on the base output drive -->
    <ItemGroup>
      <ReferenceCopyLocalPaths>
        <SourceDrive>$([System.IO.Path]::GetPathRoot('%(Identity)').Substring(0,1))</SourceDrive>
        <!-- i.e. C -->
      </ReferenceCopyLocalPaths>
      <ReferenceCopyLocalPaths>
        <SourceRelativePath>$([MSBuild]::MakeRelative('%(SourceDrive):\', '%(Identity)'))</SourceRelativePath>
        <!-- i.e. Program Files (x86)\WiX Toolset v3.10\bin\wix.dll -->
      </ReferenceCopyLocalPaths>

      <!-- exclude the project references (%(ReferenceCopyLocalPaths.BuildReference) = true) -->
      <ReferenceCopyLocalPathsOnDifferentDrive Include="@(ReferenceCopyLocalPaths)" 
                                               Condition="'%(ReferenceCopyLocalPaths.BuildReference)' != 'true' AND '%(ReferenceCopyLocalPaths.SourceDrive)' != '$(BaseOutputDrive)'">
        <Symlink>$(BaseOutputPath)_References\%(SourceDrive)\%(SourceRelativePath)</Symlink>
      </ReferenceCopyLocalPathsOnDifferentDrive>
    </ItemGroup>

    <!-- for each ReferenceCopyLocalPathsOnDifferentDrive check if it already has a symlink in the _References directory and if so, that it points to the original path -->
    <QuerySymlink Condition="'@(ReferenceCopyLocalPathsOnDifferentDrive)' != '' AND Exists('%(ReferenceCopyLocalPathsOnDifferentDrive.Symlink)')"
                  LinkName="%(ReferenceCopyLocalPathsOnDifferentDrive.Symlink)">
      <Output TaskParameter="TargetName" ItemName="CurrentReferenceSymlinkTarget" />
    </QuerySymlink>
    <!-- detect the current symlinks which are invalid and delete them; they are the ones in CurrentReferenceSymlinkTarget but not in ReferenceCopyLocalPathsOnDifferentDrive -->
    <ItemGroup>
      <InvalidSymlinkTarget Include="@(CurrentReferenceSymlinkTarget)" Exclude="@(ReferenceCopyLocalPathsOnDifferentDrive)" />
    </ItemGroup>
    <!-- ReSharper disable UnknownMetadata -->
    <Message Condition="'@(InvalidSymlinkTarget)' != ''" Text="Symbolic link '%(InvalidSymlinkTarget.LinkName)' is invalid and needs to be recreated." />
    <Delete Condition="'@(InvalidSymlinkTarget)' != ''" Files="@(InvalidSymlinkTarget->'%(LinkName)')" />
    <!-- ReSharper restore UnknownMetadata -->

    <!-- now we can proceed with creating the symlinks -->
    <Message Condition ="'@(ReferenceCopyLocalPathsOnDifferentDrive)' != '' AND !Exists('%(ReferenceCopyLocalPathsOnDifferentDrive.Symlink)')"
             Text="Creating symlink for reference '%(ReferenceCopyLocalPathsOnDifferentDrive.Identity)' as '%(ReferenceCopyLocalPathsOnDifferentDrive.Symlink)'." />
    <CreateSymlink Condition="'@(ReferenceCopyLocalPathsOnDifferentDrive)' != '' AND !Exists('%(ReferenceCopyLocalPathsOnDifferentDrive.Symlink)')"
                   LinkName="%(ReferenceCopyLocalPathsOnDifferentDrive.Symlink)" TargetName="%(ReferenceCopyLocalPathsOnDifferentDrive.Identity)" />
    <!-- finally, update ReferenceCopyLocalPaths to replace the ones on different drives using the symlinks -->
    <ItemGroup Condition ="@(ReferenceCopyLocalPathsOnDifferentDrive) != ''">
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPathsOnDifferentDrive)" />
      <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPathsOnDifferentDrive->'%(Symlink)')" />
    </ItemGroup>
  </Target>
  
  <!--
  ============================================================
                                      _IgnoreBuildingInsideVisualStudio

  Disable BuildingInsideVisualStudio to allow using hardlinks when copying files to output folder. This overrides MSBuild's behavior which disallows this for some reason.
  ============================================================
  -->
  <Target Name="_IgnoreBuildingInsideVisualStudio">
    <PropertyGroup>
      <_BuildingInsideVisualStudio>$(BuildingInsideVisualStudio)</_BuildingInsideVisualStudio>
      <BuildingInsideVisualStudio>false</BuildingInsideVisualStudio>
    </PropertyGroup>
  </Target>
  
  <!--
  ============================================================
                                      _RestoreBuildingInsideVisualStudio

  Restore the previous value of BuildingInsideVisualStudio.
  ============================================================
  -->
  <Target Name="_RestoreBuildingInsideVisualStudio">
    <PropertyGroup>
      <BuildingInsideVisualStudio>$(_BuildingInsideVisualStudio)</BuildingInsideVisualStudio>
    </PropertyGroup>
  </Target>

  <Import Project="$(AfterTargetsProjectPath)" Condition="'$(AfterTargetsProjectPath)' != '' AND Exists('$(AfterTargetsProjectPath)')"/>

</Project>
<!-- ReSharper restore UnknownTask -->